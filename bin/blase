#!/usr/bin/env python
from ase.io import read
from ase.build import molecule
from ase.io.cube import read_cube_data
from blaseio import write_blender
import sys
import argparse

def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('--inputfile', '-i', type=str, default='',
                        help="the input json file, includes coordinates of a \
                        set of points, threshold and a list of pairs of points ")
    parser.add_argument('--display', action='store_true', default=True,
                        help="render")
    parser.add_argument('--run_render', action='store_false', default=False,
                        help="render")
    parser.add_argument('--model_type', '-m', type=str, default='0',
                        help="structure model")
    parser.add_argument('--isosurface', '-iso', type=str, default='0.002',
                        help="structure model")
    parser.add_argument('--output_image', '-o', type=str, default='output',
                        help="write output to specified file ")
    parser.add_argument('--camera', action='store_false', default=False,
                        help="camera")
    parser.add_argument('--light', action='store_false', default=False,
                        help="light")
    args = parser.parse_args()
    #
    blase = {}
    batoms = {}
    if not args.inputfile:
        atoms = molecule('H2O')
    else:
        if args.inputfile.split('.')[-1] == 'cube':
            data, atoms = read_cube_data(args.inputfile)
            level = [float(x) for x in args.isosurface.split()]
            batoms['isosurface'] = [data] + level
        else:
            atoms = read(args.inputfile)
    batoms['atoms'] = atoms
    if atoms.pbc.any():
      batoms['show_unit_cell'] = True
    blase['output_image'] = args.output_image
    blase['run_render'] = args.run_render
    batoms['model_type'] = args.model_type
    
    print('='*30)
    print('Import structure')
    print('='*30)
    print(batoms)
    print(blase)
    write_blender(batoms, blase, display=args.display)
    print('\n Finished!')


if __name__ == "__main__":
    main()